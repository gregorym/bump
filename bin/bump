#!/usr/bin/env ruby
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = <<BANNER
Bump your gem version.

Usage:
    bump current    # show current version
    bump file       # show version file path
    bump pre        # increase prerelease version of your gem (1.0.0-X) [alpha, beta, rc, ]
    bump alhpa      # increase alpha version of your gem (1.0.0-X) [alpha, alpha.1, alpha.2]
    bump beta       # increase beta version of your gem (1.0.0-X) [beta, beta.1, beta.2]
    bump rc         # increase release canddate version of your gem (1.0.0-X) [rc, rc.1, rc.2]
    bump patch      # increase patch version of your gem (1.0.X)
    bump minor      # increase minor version of your gem (1.X.0)
    bump major      # increase major version of your gem (X.0.0)
    bump set 1.2.3  # set the version number to the given value

Options:
BANNER
  opts.on("--no-commit", "Do not make a commit.") { options[:commit] = false }
  opts.on("-m","--commit-message [MSG]", "Append MSG to the commit message.") {|msg| options[:commit_message] = msg }
  opts.on("--no-bundle", "Do not bundle.") { options[:bundle] = false }
  opts.on("--tag", "Create git tag from version (only if commit is true).") { options[:tag] = true }
  opts.on("-h", "--help","Show this.") { puts opts; exit }
end.parse!

unless (ARGV.size == 1 && ARGV.first != "set") || (ARGV.size == 2 && ARGV.first == "set")
  puts "Usage instructions: bump --help"
  exit 1
end

if ARGV.first == "set"
  options[:version] = ARGV[1]
end

require File.expand_path('../../lib/bump', __FILE__)

output, status = Bump::Bump.run(ARGV.first, options)
puts output
exit status
